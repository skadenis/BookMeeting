import React, { useEffect, useMemo, useState, useRef } from 'react'
import { Button, Space, Input, DatePicker, TimePicker, Select, message, Card, Typography, Divider, Row, Col, Tag, Tooltip, Modal, Form, Switch } from 'antd'
import { PlusOutlined, DeleteOutlined, EditOutlined, ClockCircleOutlined, UserOutlined, CoffeeOutlined, ArrowLeftOutlined } from '@ant-design/icons'
import dayjs from 'dayjs'
import api from '../../api/client'
import { useNavigate, useParams } from 'react-router-dom'

const { Title, Text } = Typography
const { TextArea } = Input

function useApi() { return api }

const DOW = [
  { key: '1', label: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', short: '–ü–Ω' },
  { key: '2', label: '–í—Ç–æ—Ä–Ω–∏–∫', short: '–í—Ç' },
  { key: '3', label: '–°—Ä–µ–¥–∞', short: '–°—Ä' },
  { key: '4', label: '–ß–µ—Ç–≤–µ—Ä–≥', short: '–ß—Ç' },
  { key: '5', label: '–ü—è—Ç–Ω–∏—Ü–∞', short: '–ü—Ç' },
  { key: '6', label: '–°—É–±–±–æ—Ç–∞', short: '–°–±' },
  { key: '0', label: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', short: '–í—Å' }
]

const SLOT_TYPES = [
  { value: 'regular', label: '–û–±—ã—á–Ω—ã–π', icon: <UserOutlined />, color: 'blue' },
  { value: 'break', label: '–ü–µ—Ä–µ—Ä—ã–≤', icon: <CoffeeOutlined />, color: 'orange' },
  { value: 'peak', label: '–ü–∏–∫–æ–≤—ã–π', icon: <ClockCircleOutlined />, color: 'green' }
]

// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

function generateTimeSlots(start, end, duration = 30) {
  const toMin = (t) => { const [h,m] = t.split(':').map(Number); return h*60+m }
  const toTime = (m) => `${String(Math.floor(m/60)).padStart(2,'0')}:${String(m%60).padStart(2,'0')}`
  const res = []
  let s = toMin(start), e = toMin(end)
  for (let t=s; t<e; t+=duration) res.push({ start: toTime(t), end: toTime(t+duration) })
  return res
}

export default function TemplateEditPage() {
  const api = useApi()
  const navigate = useNavigate()
  const { id } = useParams()
  const isFirstRender = useRef(true)
  
  // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [baseStartTime, setBaseStartTime] = useState(dayjs('09:00', 'HH:mm'))
  const [baseEndTime, setBaseEndTime] = useState(dayjs('18:00', 'HH:mm'))
  const [slotDuration, setSlotDuration] = useState(30)
  const [defaultCapacity, setDefaultCapacity] = useState(1)
  const [templateName, setTemplateName] = useState('')
  const [description, setDescription] = useState('')
  
  // –î–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
  const [weekdays, setWeekdays] = useState({})
  
  // –£–ø—Ä–æ—â–µ–Ω–æ: –±–µ–∑ —Ä–µ–∂–∏–º–æ–≤ –¥–Ω–µ–π
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
  const [editSlot, setEditSlot] = useState(null)
  const [editCapacity, setEditCapacity] = useState(1)
  // Bulk selection state
  const [selectedCells, setSelectedCells] = useState([]) // [{ dayKey, timeSlot }]
  const [bulkCapacity, setBulkCapacity] = useState(1)
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const [loading, setLoading] = useState(false)

  // Reset bulk selection on ESC
  useEffect(() => {
    const onKeyDown = (e) => {
      const isEsc = e.key === 'Escape' || e.key === 'Esc' || e.code === 'Escape'
      if (!isEsc) return
      if (!editSlot) setSelectedCells([])
    }
    window.addEventListener('keydown', onKeyDown, true)
    document.addEventListener('keydown', onKeyDown, true)
    return () => {
      window.removeEventListener('keydown', onKeyDown, true)
      document.removeEventListener('keydown', onKeyDown, true)
    }
  }, [editSlot])

  useEffect(() => { 
    if (id) {
      loadTemplate()
    } else {
      initializeNewTemplate()
    }
  }, [id])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    console.log('üîç useEffect triggered - isFirstRender:', isFirstRender.current)
    console.log('üîç DOW:', DOW)
    
    if (isFirstRender.current) {
      const newWeekdays = {}
      
      DOW.forEach(d => {
        newWeekdays[d.key] = {
          start: baseStartTime.format('HH:mm'),
          end: baseEndTime.format('HH:mm'),
          capacity: defaultCapacity,
          specialSlots: []
        }
        
      })
      
      console.log('üîç Setting initial weekdays:', newWeekdays)
      
      setWeekdays(newWeekdays)
      isFirstRender.current = false
    }
  }, [baseStartTime, baseEndTime, defaultCapacity])

  const loadTemplate = async () => {
    setLoading(true)
    try {
      console.log('üîç Loading template with ID:', id)
      console.log('üîç API base URL:', import.meta.env.VITE_API_BASE_URL || '/api')
      
      const response = await api.get(`/admin/templates/${id}`)
      console.log('‚úÖ Template loaded successfully:', response.data)
      
      const template = response.data.data
      
      setTemplateName(template.name)
      setDescription(template.description || '')
      setBaseStartTime(dayjs(template.baseStartTime || '09:00', 'HH:mm'))
      setBaseEndTime(dayjs(template.baseEndTime || '18:00', 'HH:mm'))
      setSlotDuration(template.slotDuration || 30)
      setDefaultCapacity(template.defaultCapacity || 1)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
      if (template.weekdays && Object.keys(template.weekdays).length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        const firstDay = Object.values(template.weekdays)[0]
        if (firstDay && Array.isArray(firstDay)) {
          // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º specialSlots
          const newWeekdays = {}
          for (const [dayKey, slots] of Object.entries(template.weekdays)) {
            if (Array.isArray(slots) && slots.length > 0) {
              // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω—è
              const baseCapacity = slots[0].capacity || template.defaultCapacity || 1
              newWeekdays[dayKey] = {
                start: slots[0].start,
                end: slots[slots.length - 1].end,
                capacity: baseCapacity,
                specialSlots: []
              }
              
              // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º specialSlots –∏–∑ —Å–ª–æ—Ç–æ–≤ —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
              const specialSlots = []
              slots.forEach(slot => {
                if (slot.capacity !== baseCapacity) {
                  specialSlots.push({
                    start: slot.start,
                    end: slot.end,
                    capacity: slot.capacity,
                    type: slot.capacity === 0 ? 'break' : 'custom'
                  })
                }
              })
              
              if (specialSlots.length > 0) {
                newWeekdays[dayKey].specialSlots = specialSlots
                console.log(`üîç –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã specialSlots –¥–ª—è –¥–Ω—è ${dayKey}:`, specialSlots)
              }
            }
          }
          setWeekdays(newWeekdays)
        } else {
          // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
          setWeekdays(template.weekdays)
        }
      } else {
        // –ï—Å–ª–∏ –¥–Ω–µ–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
        const newWeekdays = {}
        DOW.forEach(d => {
          newWeekdays[d.key] = {
            start: template.baseStartTime || '09:00',
            end: template.baseEndTime || '18:00',
            capacity: template.defaultCapacity || 1,
            specialSlots: []
          }
        })
        setWeekdays(newWeekdays)
      }
      
      console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ weekdays:', weekdays)
    } catch (error) {
      console.error('‚ùå Error loading template:', error)
      console.error('‚ùå Error response:', error.response)
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞')
      navigate('/admin/templates')
    } finally {
      setLoading(false)
    }
  }

  const initializeNewTemplate = () => {
    setTemplateName('–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω')
    setDescription('')
    setBaseStartTime(dayjs('09:00', 'HH:mm'))
    setBaseEndTime(dayjs('18:00', 'HH:mm'))
    setSlotDuration(30)
    setDefaultCapacity(1)
    
    const newWeekdays = {}
    DOW.forEach(d => {
      newWeekdays[d.key] = {
        start: '09:00',
        end: '18:00',
        capacity: 1,
        specialSlots: []
      }
    })
    setWeekdays(newWeekdays)
    isFirstRender.current = true
  }

  const updateSlotCapacity = (dayKey, timeSlot, newCapacity) => {
    const copy = { ...weekdays }
    if (!copy[dayKey]) return
    
    // –ò–∑–º–µ–Ω—è–µ–º –í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞. 0 –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–Ω—è
    let hasSpecialSlot = false
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—Ü —Å–ª–æ—Ç–∞ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ–∫–Ω–∞ –¥–Ω—è
    const startMin = dayjs(timeSlot, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
    const endMin = startMin + slotDuration
    const endSlot = dayjs('00:00', 'HH:mm').add(endMin, 'minute').format('HH:mm')
    if (copy[dayKey].specialSlots && Array.isArray(copy[dayKey].specialSlots)) {
      copy[dayKey].specialSlots.forEach(slot => {
        if (slot.start === timeSlot) {
          slot.capacity = newCapacity
          slot.type = newCapacity === 0 ? 'break' : (slot.type || 'custom')
          hasSpecialSlot = true
        }
      })
    }
    
    // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!hasSpecialSlot) {
      if (!copy[dayKey].specialSlots) {
        copy[dayKey].specialSlots = []
      }
      
      copy[dayKey].specialSlots.push({
        start: timeSlot,
        end: endSlot,
        capacity: newCapacity,
        type: newCapacity === 0 ? 'break' : 'custom'
      })
    }
    
    // –í–ê–ñ–ù–û: –Ω–µ —Ä–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –∏ –Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–Ω—è. –°–ø–µ—Ü-—Å–ª–æ—Ç –º–æ–∂–µ—Ç –∂–∏—Ç—å –ø–æ–≤–µ—Ä—Ö –±–µ–ª–æ–≥–æ.
    
    setWeekdays(copy)
  }

  const closeEntireDay = (dayKey) => {
    const copy = { ...weekdays }
    
    if (!copy[dayKey]) return
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –¥–µ–Ω—å - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º capacity = 0
    copy[dayKey] = {
      ...copy[dayKey],
      capacity: 0,
      specialSlots: []
    }
    setWeekdays(copy)
  }

  const resetDayToDefault = (dayKey) => {
    const copy = { ...weekdays }
    
    if (!copy[dayKey]) return
    
    copy[dayKey] = {
      start: baseStartTime.format('HH:mm'),
      end: baseEndTime.format('HH:mm'),
      capacity: defaultCapacity,
      specialSlots: []
    }
    setWeekdays(copy)
  }
  

  const fillWeekdayWithBase = (dayKey) => {
    const weekday = weekdays[dayKey]
    if (!weekday || !weekday.start || !weekday.end) return []
    
    const slots = generateTimeSlots(weekday.start, weekday.end, slotDuration)
    return slots.map(slot => ({
      ...slot,
      capacity: weekday.capacity || defaultCapacity
    }))
  }

  const saveTemplate = async () => {
    if (!templateName.trim()) {
      message.error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞')
      return
    }

    try {
      setLoading(true)
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º weekdays –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –±—ç–∫–µ–Ω–¥
      const processedWeekdays = {}
      for (const [dayKey, profile] of Object.entries(weekdays)) {
        if (profile && profile.start && profile.end) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–Ω—è
          const slots = generateTimeSlots(profile.start, profile.end, slotDuration)
          const slotsWithCapacity = slots.map(slot => ({
            ...slot,
            capacity: profile.capacity || defaultCapacity
          }))
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
          if (profile.specialSlots && Array.isArray(profile.specialSlots)) {
            profile.specialSlots.forEach(special => {
              const startMin = dayjs(special.start, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
              const endMin = dayjs(special.end, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
              
              slotsWithCapacity.forEach(slot => {
                const slotStartMin = dayjs(slot.start, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
                const slotEndMin = dayjs(slot.end, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
                
                if (slotStartMin >= startMin && slotEndMin <= endMin) {
                  slot.capacity = special.capacity
                  slot.type = special.type
                }
              })
            })
          }
          
          processedWeekdays[dayKey] = slotsWithCapacity
        }
      }
      
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è—é —à–∞–±–ª–æ–Ω:', {
        name: templateName,
        weekdays: processedWeekdays,
        specialSlots: Object.fromEntries(
          Object.entries(weekdays).map(([key, profile]) => [
            key, 
            profile?.specialSlots || []
          ])
        )
      })
      
      const templateData = {
        name: templateName,
        description,
        baseStartTime: baseStartTime.format('HH:mm'),
        baseEndTime: baseEndTime.format('HH:mm'),
        slotDuration: slotDuration,
        defaultCapacity,
        weekdays: processedWeekdays
      }

      if (id) {
        await api.put(`/admin/templates/${id}`, templateData)
        message.success('–®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω')
      } else {
        await api.post('/admin/templates', templateData)
        message.success('–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω')
      }

      navigate('/admin/templates')
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞')
    } finally {
      setLoading(false)
    }
  }

  const isCellSelected = (dayKey, timeSlot) => {
    return selectedCells.some(c => c.dayKey === dayKey && c.timeSlot === timeSlot)
  }

  const toggleSelectCell = (dayKey, timeSlot, additive) => {
    setSelectedCells((prev) => {
      const exists = prev.some(c => c.dayKey === dayKey && c.timeSlot === timeSlot)
      if (additive) {
        return exists ? prev.filter(c => !(c.dayKey === dayKey && c.timeSlot === timeSlot)) : [...prev, { dayKey, timeSlot }]
      }
      // not additive: replace with single selection
      return exists ? [] : [{ dayKey, timeSlot }]
    })
  }

  const renderChessboard = () => {
    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    let maxStartTime = baseStartTime
    let maxEndTime = baseEndTime
    
    Object.values(weekdays).forEach(weekday => {
      if (weekday && weekday.start && weekday.end && weekday.capacity > 0) {
        const dayStart = dayjs(weekday.start, 'HH:mm')
        const dayEnd = dayjs(weekday.end, 'HH:mm')
        
        if (dayStart.isBefore(maxStartTime)) {
          maxStartTime = dayStart
        }
        if (dayEnd.isAfter(maxEndTime)) {
          maxEndTime = dayEnd
        }
      }
    })
    
    const timeSlots = generateTimeSlots(
      maxStartTime.format('HH:mm'), 
      maxEndTime.format('HH:mm'), 
      slotDuration
    )
    
    if (!timeSlots || timeSlots.length === 0) {
      return <div>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏</div>
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üîç DOW length:', DOW.length)
    console.log('üîç DOW:', DOW)
    console.log('üîç weekdays:', weekdays)
    
    // –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–±–æ—Ä–∞ —ç—Å—Ç–µ—Ç–∏—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    const getGreenBgByCapacity = (cap) => {
      const maxCap = 6
      const n = Math.max(0, Math.min(Number(cap) || 0, maxCap))
      const ratio = n / maxCap
      const lightness = 94 - Math.round(ratio * 28) // 94% ‚Üí 66%
      const top = Math.min(100, lightness + 4)
      return `linear-gradient(180deg, hsl(145, 45%, ${top}%) 0%, hsl(145, 55%, ${lightness}%) 100%)`
    }
    const getGreenFgByCapacity = (cap) => {
      const maxCap = 6
      const n = Math.max(0, Math.min(Number(cap) || 0, maxCap))
      return n >= 3 ? '#0b2e13' : '#134d26'
    }

    return (
      <div style={{ border: '1px solid #d9d9d9', borderRadius: '8px', overflow: 'hidden' }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π + –∫–æ–ª–æ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–≤–∞ */}
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: `120px repeat(${DOW.length}, 1fr)`,
          background: '#fafafa',
          borderBottom: '1px solid #d9d9d9'
        }}>
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ */}
          <div style={{ 
            padding: '8px', 
            fontWeight: 600, 
            textAlign: 'center',
            borderRight: '1px solid #d9d9d9',
            position: 'relative',
            background: '#fafafa'
          }}>–í—Ä–µ–º—è</div>
          {DOW.map((d, index) => {
            const weekday = weekdays[d.key]
            const isClosed = weekday?.capacity === 0
            
            console.log(`üîç Rendering day ${d.key} (${d.short}):`, { weekday, isClosed })
            
            return (
              <div 
                key={d.key} 
                style={{ 
                  padding: '8px', 
                  fontWeight: 600, 
                  textAlign: 'center',
                  borderRight: '1px solid #d9d9d9',
                  position: 'relative',
                  background: '#fafafa',
                  cursor: 'pointer'
                }}
                onClick={() => {
                  setEditSlot({ 
                    dayKey: d.key, 
                    timeSlot: null, 
                    currentCapacity: weekday?.capacity || defaultCapacity, 
                    isSpecialSlot: false,
                    isDayEdit: true
                  })
                  setEditCapacity(weekday?.capacity || defaultCapacity)
                }}
                title={`–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è ${d.short}`}
              >
                <div style={{ 
                  marginBottom: '4px',
                  color: '#555',
                  fontWeight: 'bold'
                }}>
                  {d.short}
                </div>
              </div>
            )
          })}
        </div>
        
        {/* –°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ */}
        {timeSlots.map((t, timeIndex) => (
          <React.Fragment key={timeIndex}>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: `120px repeat(${DOW.length}, 1fr)`,
              borderBottom: '1px solid #d9d9d9'
            }}>
              {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º */}
              <div style={{ padding: '8px', background: '#fafafa', borderRight: '1px solid #d9d9d9', textAlign: 'center', color: '#555', fontSize: '12px' }}>
                {t.start}
              </div>
              {/* –°–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è */}
              {DOW.map(d => {
                const weekday = weekdays[d.key]
                if (!weekday || !weekday.start || !weekday.end) {
                  return <div key={d.key} style={{ padding: '8px', background: '#fafafa', borderRight: '1px solid #d9d9d9' }} />
                }
                
                const timeMin = dayjs(t.start, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
                const dayStartMin = dayjs(weekday.start, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
                const dayEndMin = dayjs(weekday.end, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
                const isWithin = timeMin >= dayStartMin && timeMin < dayEndMin
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –∫–∞–∫–æ–π-–ª–∏–±–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª–æ—Ç
                let coversBySpecial = false
                if (weekday.specialSlots) {
                  weekday.specialSlots.forEach(special => {
                    const specialStartMin = dayjs(special.start, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
                    const specialEndMin = dayjs(special.end, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
                    if (timeMin >= specialStartMin && timeMin < specialEndMin) {
                      coversBySpecial = true
                    }
                  })
                }

                if (!(isWithin || coversBySpecial)) {
                  // –í—Ä–µ–º—è –≤–Ω–µ –æ–∫–Ω–∞ –¥–Ω—è –∏ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ‚Äî –ø–æ–∑–≤–æ–ª—è–µ–º –∫–ª–∏–∫–Ω—É—Ç—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ
                  return (
                    <div
                      key={d.key}
                      style={{ padding: '8px', background: '#fafafa', borderRight: '1px solid #d9d9d9', borderBottom: '1px solid #d9d9d9', color: '#999', textAlign: 'center', cursor: 'pointer' }}
                      title={'–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è'}
                      onClick={() => {
                        const additive = (window.event && (window.event.metaKey || window.event.ctrlKey))
                        if (additive) {
                          toggleSelectCell(d.key, t.start, true)
                          return
                        }
                        setSelectedCells([])
                        setEditSlot({ dayKey: d.key, timeSlot: t.start, currentCapacity: 0, isSpecialSlot: false })
                        setEditCapacity(defaultCapacity)
                      }}
                    >
                      
                    </div>
                  )
                }
                
                // –ë–∞–∑–æ–≤–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 0 –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤–Ω–µ –æ–∫–Ω–∞, –∏–Ω–∞—á–µ capacity –¥–Ω—è
                let capacity = isWithin ? (typeof weekday.capacity === 'number' ? weekday.capacity : defaultCapacity) : 0
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç –±–∞–∑–æ–≤—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–º–æ–≥—É—Ç –æ—Ç–∫—Ä—ã—Ç—å –≤—Ä–µ–º—è –≤ –≤—ã—Ö–æ–¥–Ω–æ–π/–∑–∞ –æ–∫–Ω–æ–º)
                if (weekday.specialSlots) {
                  weekday.specialSlots.forEach(special => {
                    const specialStartMin = dayjs(special.start, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
                    const specialEndMin = dayjs(special.end, 'HH:mm').diff(dayjs('00:00', 'HH:mm'), 'minute')
                    if (timeMin >= specialStartMin && timeMin < specialEndMin) {
                      capacity = special.capacity
                    }
                  })
                }
                
                const isWorking = capacity > 0
                const bg = isWorking 
                  ? getGreenBgByCapacity(capacity)
                  : 'linear-gradient(180deg, hsl(0, 80%, 98%) 0%, hsl(0, 75%, 96%) 100%)'
                const fg = isWorking ? getGreenFgByCapacity(capacity) : '#a8071a'
                
                return (
                  <div 
                    key={d.key} 
                    style={{ 
                      padding: '8px', 
                      background: bg, 
                      color: fg, 
                      fontSize: '12px', 
                      textAlign: 'center',
                      cursor: 'pointer',
                      borderRight: '1px solid #d9d9d9',
                      borderBottom: '1px solid #d9d9d9',
                      fontWeight: 600,
                      boxShadow: isCellSelected(d.key, t.start) ? 'inset 0 0 0 2px #1677ff' : 'none'
                    }}
                    onClick={() => {
                      const additive = (window.event && (window.event.metaKey || window.event.ctrlKey))
                      if (additive) {
                        toggleSelectCell(d.key, t.start, true)
                        return
                      }
                      setSelectedCells([])
                      setEditSlot({ dayKey: d.key, timeSlot: t.start, currentCapacity: capacity, isSpecialSlot: false })
                      setEditCapacity(capacity)
                    }}
                    title={'–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                  >
                    {capacity}
                  </div>
                )
              })}
            </div>
          </React.Fragment>
        ))}
      </div>
    )
  }

  if (loading) {
    return <div style={{ padding: '24px', textAlign: 'center' }}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
  }

  return (
    <div style={{ padding: '24px' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '24px' }}>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={() => navigate('/admin/templates')}
          style={{ marginRight: '16px' }}
        >
          –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
        </Button>
        <Title level={3} style={{ margin: 0 }}>
          {id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞'}
        </Title>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <Row gutter={24}>
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Col span={12}>
          <Card title="–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" style={{ marginBottom: '24px' }}>
            <Space direction="vertical" style={{ width: '100%' }}>
              <div>
                <Text strong>–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</Text>
                <Input
                  value={templateName}
                  onChange={(e) => setTemplateName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
                  style={{ width: '100%', marginTop: '8px' }}
                />
              </div>
              
              <div>
                <Text strong>–û–ø–∏—Å–∞–Ω–∏–µ:</Text>
                <Input
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                  style={{ width: '100%', marginTop: '8px' }}
                />
              </div>
              
              <Row gutter={16}>
                <Col span={12}>
                  <Text strong>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</Text>
                  <TimePicker
                    value={baseStartTime}
                    onChange={setBaseStartTime}
                    format="HH:mm"
                    minuteStep={30}
                    style={{ width: '100%', marginTop: '8px' }}
                  />
                </Col>
                <Col span={12}>
                  <Text strong>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</Text>
                  <TimePicker
                    value={baseEndTime}
                    onChange={setBaseEndTime}
                    format="HH:mm"
                    minuteStep={30}
                    style={{ width: '100%', marginTop: '8px' }}
                  />
                </Col>
              </Row>
              
              <Row gutter={16}>
                <Col span={12}>
                  <Text strong>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</Text>
                  <Input
                    type="number"
                    min={1}
                    value={defaultCapacity}
                    onChange={(e) => setDefaultCapacity(Number(e.target.value) || 1)}
                    style={{ marginTop: '8px' }}
                    suffix="—á–µ–ª."
                  />
                </Col>
                <Col span={12}>
                  <Text strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞:</Text>
                  <Select
                    value={slotDuration}
                    onChange={setSlotDuration}
                    style={{ width: '100%', marginTop: '8px' }}
                    options={[
                      { value: 15, label: '15 –º–∏–Ω—É—Ç' },
                      { value: 30, label: '30 –º–∏–Ω—É—Ç' },
                      { value: 45, label: '45 –º–∏–Ω—É—Ç' },
                      { value: 60, label: '1 —á–∞—Å' }
                    ]}
                  />
                </Col>
              </Row>
            </Space>
          </Card>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–ø—Ä–æ—Å—Ç–æ: —Ä–∞–±–æ—á–∏–π? –∏ –≤—Ä–µ–º—è —Å/–¥–æ) */}
          <Card title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏" style={{ marginBottom: '24px' }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ */}
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: '35px 90px 70px 70px 80px 80px',
              alignItems: 'center',
              gap: 8,
              padding: '6px 0',
              borderBottom: '2px solid #d9d9d9',
              marginBottom: '8px',
              fontWeight: 600,
              fontSize: '11px',
              color: '#666'
            }}>
              <div style={{ textAlign: 'center' }}>–î–µ–Ω—å</div>
              <div>–°—Ç–∞—Ç—É—Å</div>
              <div>–ù–∞—á–∞–ª–æ</div>
              <div>–ö–æ–Ω–µ—Ü</div>
              <div>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</div>
              <div style={{ textAlign: 'center' }}>–î–µ–π—Å—Ç–≤–∏—è</div>
            </div>
            
            <Space direction="vertical" style={{ width: '100%' }}>
              {DOW.map(d => {
                const wd = weekdays[d.key] || {}
                const working = (wd.capacity ?? defaultCapacity) > 0
                return (
                  <div key={d.key} style={{ 
                    display: 'grid', 
                    gridTemplateColumns: '35px 90px 70px 70px 80px 80px',
                    alignItems: 'center',
                    gap: 8,
                    padding: '8px 0',
                    borderBottom: '1px solid #f0f0f0'
                  }}>
                    {/* –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ */}
                    <div style={{ fontWeight: 600, textAlign: 'center', fontSize: '12px' }}>{d.short}</div>
                    
                    {/* –†–∞–±–æ—á–∏–π –¥–µ–Ω—å */}
                    <div style={{ display: 'flex', alignItems: 'center', gap: 4 }}>
                      <Text style={{ whiteSpace: 'nowrap', fontSize: '11px' }}>–†–∞–±–æ—á–∏–π:</Text>
                      <Switch
                        checked={working}
                        onChange={(checked) => {
                          const copy = { ...weekdays }
                          copy[d.key] = copy[d.key] || {}
                          copy[d.key].capacity = checked ? (defaultCapacity || 1) : 0
                          // –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–º–∏ —á–∞—Å–∞–º–∏, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
                          copy[d.key].start = copy[d.key].start || baseStartTime.format('HH:mm')
                          copy[d.key].end = copy[d.key].end || baseEndTime.format('HH:mm')
                          setWeekdays(copy)
                        }}
                        size="small"
                      />
                    </div>
                    
                    {/* –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ */}
                    <div style={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                      <Text style={{ whiteSpace: 'nowrap', fontSize: '11px' }}>—Å</Text>
                      <TimePicker
                        value={wd.start ? dayjs(wd.start, 'HH:mm') : baseStartTime}
                        onChange={(val) => {
                          const copy = { ...weekdays }
                          copy[d.key] = copy[d.key] || {}
                          copy[d.key].start = (val || baseStartTime).format('HH:mm')
                          setWeekdays(copy)
                        }}
                        format="HH:mm"
                        minuteStep={30}
                        disabled={!working}
                        style={{ width: 55 }}
                        size="small"
                      />
                    </div>
                    
                    {/* –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è */}
                    <div style={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                      <Text style={{ whiteSpace: 'nowrap', fontSize: '11px' }}>–¥–æ</Text>
                      <TimePicker
                        value={wd.end ? dayjs(wd.end, 'HH:mm') : baseEndTime}
                        onChange={(val) => {
                          const copy = { ...weekdays }
                          copy[d.key] = copy[d.key] || {}
                          copy[d.key].end = (val || baseEndTime).format('HH:mm')
                          setWeekdays(copy)
                        }}
                        format="HH:mm"
                        minuteStep={30}
                        disabled={!working}
                        style={{ width: 55 }}
                        size="small"
                      />
                    </div>
                    
                    {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
                    <div style={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                      <Input
                        type="number"
                        min={0}
                        max={10}
                        value={wd.capacity || defaultCapacity}
                        onChange={(e) => {
                          const copy = { ...weekdays }
                          copy[d.key] = copy[d.key] || {}
                          copy[d.key].capacity = Number(e.target.value) || 0
                          setWeekdays(copy)
                        }}
                        disabled={!working}
                        style={{ width: 50 }}
                        size="small"
                        suffix="—á–µ–ª."
                        placeholder="0"
                      />
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ */}
                    <div style={{ textAlign: 'center' }}>
                      <Button 
                        size="small" 
                        onClick={() => resetDayToDefault(d.key)}
                        disabled={!working}
                        style={{ fontSize: '11px', padding: '0 6px' }}
                      >
                        –°–±—Ä–æ—Å
                      </Button>
                    </div>
                  </div>
                )
              })}
            </Space>
          </Card>
        </Col>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä */}
        <Col span={12}>
          <Card className="template-preview" title="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞">
            {renderChessboard()}
          </Card>
        </Col>
      </Row>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px', marginTop: '24px' }}>
        <Button onClick={() => navigate('/admin/templates')}>
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button type="primary" onClick={saveTemplate} loading={loading}>
          {id ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
        </Button>
      </div>

      {selectedCells.length > 0 && (
        <div style={{ position:'sticky', bottom:16, zIndex:3, display:'flex', gap:12, alignItems:'center', background:'#fff', padding:'8px 12px', border:'1px solid #e6f4ff', boxShadow:'0 8px 24px rgba(0,0,0,0.08)', borderRadius:8 }}>
          <div style={{ fontWeight:600 }}>–í—ã–±—Ä–∞–Ω–æ: {selectedCells.length}</div>
          <div style={{ color:'#555' }}>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</div>
          <Input type="number" min={0} style={{ width:160 }} placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 (0 ‚Äî –ø–µ—Ä–µ—Ä—ã–≤)" value={bulkCapacity} onChange={(e)=>setBulkCapacity(Math.max(0, Number(e.target.value)||0))} />
          <Button type="primary" onClick={() => {
            try {
              selectedCells.forEach(c => updateSlotCapacity(c.dayKey, c.timeSlot, bulkCapacity))
              message.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')
              setSelectedCells([])
            } catch {
              message.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            }
          }}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å</Button>
          <Button onClick={()=>setSelectedCells([])}>–°–±—Ä–æ—Å–∏—Ç—å</Button>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞ –∏–ª–∏ –¥–Ω—è */}
      <Modal
        title={editSlot?.isDayEdit ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è" : "–ò–∑–º–µ–Ω–∏—Ç—å –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–ª–æ—Ç–∞"}
        open={!!editSlot}
        onCancel={() => setEditSlot(null)}
        footer={[
          <Button key="cancel" onClick={() => setEditSlot(null)}>
            –û—Ç–º–µ–Ω–∞
          </Button>,
          <Button 
            key="save" 
            type="primary" 
            onClick={() => {
              if (editSlot) {
                if (editSlot.isDayEdit) {
                  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–Ω—è: –µ—Å–ª–∏ editCapacity == 0, –∑–∞–∫—Ä—ã—Ç—å –¥–µ–Ω—å; –∏–Ω–∞—á–µ –æ—Ç–∫—Ä—ã—Ç—å –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —á–∞—Å—ã
                  if (editCapacity === 0) {
                    closeEntireDay(editSlot.dayKey)
                  } else {
                    const copy = { ...weekdays }
                    copy[editSlot.dayKey] = copy[editSlot.dayKey] || {}
                    copy[editSlot.dayKey].capacity = editCapacity
                    if (!copy[editSlot.dayKey].start) copy[editSlot.dayKey].start = baseStartTime.format('HH:mm')
                    if (!copy[editSlot.dayKey].end) copy[editSlot.dayKey].end = baseEndTime.format('HH:mm')
                    setWeekdays(copy)
                  }
                } else {
                  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç
                  updateSlotCapacity(editSlot.dayKey, editSlot.timeSlot, editCapacity)
                }
                setEditSlot(null)
              }
            }}
          >
            {'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </Button>
        ]}
        width={600}
      >
        {editSlot && (
          <div>
            {editSlot.isDayEdit ? (
              // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è
              <>
                <div style={{ marginBottom: '16px' }}>
                  <Text strong>–î–µ–Ω—å:</Text> {DOW.find(d => d.key === editSlot.dayKey)?.label}
                </div>
                <div style={{ marginBottom: '16px' }}>
                  <Text strong>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</Text>
                  <Input
                    type="number"
                    min={0}
                    value={editCapacity}
                    onChange={(e) => setEditCapacity(Math.max(0, Number(e.target.value) || 0))}
                    style={{ width: '100%', marginTop: '8px' }}
                  />
                  {editCapacity === 0 && (
                    <div style={{ marginTop: '8px', color: '#ff4d4f', fontSize: '12px' }}>
                      üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è
                    </div>
                  )}
                </div>
                <div style={{ 
                  padding: '12px', 
                  background: '#f5f5f5', 
                  borderRadius: '6px',
                  fontSize: '12px'
                }}>
                  <Text strong>–î–µ–π—Å—Ç–≤–∏—è:</Text>
                  <ul style={{ marginTop: '8px', marginBottom: 0 }}>
                    <li><strong>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</strong> ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞–±–æ—á–∏–π/–≤—ã—Ö–æ–¥–Ω–æ–π –∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</li>
                  </ul>
                </div>
              </>
            ) : (
              // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞
              <>
                <div style={{ marginBottom: '16px' }}>
                  <Text strong>–î–µ–Ω—å:</Text> {DOW.find(d => d.key === editSlot.dayKey)?.label}
                </div>
                <div style={{ marginBottom: '16px' }}>
                  <Text strong>–í—Ä–µ–º—è:</Text> {editSlot.timeSlot}
                </div>
                <div style={{ marginBottom: '16px' }}>
                  <Text strong>–¢–µ–∫—É—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</Text> {editSlot.currentCapacity}
                </div>
                <div style={{ marginBottom: '16px' }}>
                  <Text strong>–¢–∏–ø —Å–ª–æ—Ç–∞:</Text> 
                  <Tag color={editSlot.isSpecialSlot ? 'blue' : 'default'} style={{ marginLeft: '8px' }}>
                    {editSlot.isSpecialSlot ? '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π' : '–ë–∞–∑–æ–≤—ã–π'}
                  </Tag>
                </div>
                <div>
                  <Text strong>–ù–æ–≤–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</Text>
                  <Input
                    type="number"
                    min={0}
                    value={editCapacity}
                    onChange={(e) => setEditCapacity(Math.max(0, Number(e.target.value) || 0))}
                    style={{ width: '100%', marginTop: '8px' }}
                  />
                  {editCapacity === 0 && (
                    <div style={{ marginTop: '8px', color: '#ff4d4f', fontSize: '12px' }}>
                      üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–∞—É–∑—ã
                    </div>
                  )}

                </div>
              </>
            )}
          </div>
        )}
      </Modal>
    </div>
  )
}
