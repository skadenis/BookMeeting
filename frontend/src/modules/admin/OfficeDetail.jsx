import React, { useEffect, useMemo, useState } from 'react'
import { Tabs, Card, Space, Button, DatePicker, Typography, message, Skeleton, Select, Input, Modal, Form, TimePicker, Divider, Tag, Tooltip, Dropdown } from 'antd'
import { MoreOutlined, DeleteOutlined, EnvironmentOutlined, ExclamationCircleOutlined } from '@ant-design/icons'
import { useNavigate, useParams } from 'react-router-dom'
import dayjs from 'dayjs'
import 'dayjs/locale/ru'
import api from '../../api/client'
import PageHeader from './components/PageHeader'

function useApi() { return api }

function toLocalISO(date) { return dayjs(date).format('YYYY-MM-DD') }

export default function OfficeDetail() {
  const { id } = useParams()
  const navigate = useNavigate()
  const api = useApi()
  dayjs.locale('ru')

  // Debug: log available variables
  console.log('üéØ OfficeDetail component loaded:', { id, api: !!api })
  const [office, setOffice] = useState(null)
  const [editOffice, setEditOffice] = useState({ city: '', address: '', bitrixOfficeId: '' })
  const [loading, setLoading] = useState(true)
  const [deleteOpen, setDeleteOpen] = useState(false)
  const [deleteConfirm, setDeleteConfirm] = useState('')

  // Templates
  const [templates, setTemplates] = useState([])
  const [selectedTplId, setSelectedTplId] = useState(undefined)
  const [applyRange, setApplyRange] = useState([dayjs().startOf('week'), dayjs().startOf('week').add(6,'day')])

  // Exceptions removed

  // Calendar preview
  const [previewStart, setPreviewStart] = useState(dayjs().startOf('week'))
  const [previewDays, setPreviewDays] = useState([])
  const [editSlot, setEditSlot] = useState(null)
  const [editCapacity, setEditCapacity] = useState(1)
  const [dayEditModal, setDayEditModal] = useState(null)
  const [modalTplId, setModalTplId] = useState(undefined)
  const [closeAfter, setCloseAfter] = useState('')
  const [openFrom, setOpenFrom] = useState('')

  // Bulk selection state for slots in preview calendar
  const [selectedSlots, setSelectedSlots] = useState([]) // [{date,start,end,slotId}]
  const isSlotSelected = (dateISO, start, end, slotId) => selectedSlots.some(s => (s.slotId ? s.slotId===slotId : (s.date===dateISO && s.start===start && s.end===end)))
  const toggleSelectSlot = (dateISO, start, end, slotId, additive) => {
    setSelectedSlots(prev => {
      const exists = prev.some(s => (s.slotId ? s.slotId===slotId : (s.date===dateISO && s.start===start && s.end===end)))
      if (additive) {
        if (exists) return prev.filter(s => !(s.slotId ? s.slotId===slotId : (s.date===dateISO && s.start===start && s.end===end)))
        return [...prev, { date: dateISO, start, end, slotId }]
      }
      return exists ? [] : [{ date: dateISO, start, end, slotId }]
    })
  }

  // Reset bulk selection on ESC when no modal is open
  useEffect(() => {
    const onKeyDown = (e) => {
      const isEsc = e.key === 'Escape' || e.key === 'Esc' || e.code === 'Escape'
      if (!isEsc) return
      if (!editSlot && !dayEditModal && !deleteOpen) {
        setSelectedSlots([])
      }
    }
    // Capture phase to bypass stopPropagation inside nested components
    window.addEventListener('keydown', onKeyDown, true)
    document.addEventListener('keydown', onKeyDown, true)
    return () => {
      window.removeEventListener('keydown', onKeyDown, true)
      document.removeEventListener('keydown', onKeyDown, true)
    }
  }, [editSlot, dayEditModal, deleteOpen])


  useEffect(() => {
    if (dayEditModal) {
      setModalTplId(selectedTplId)
    }
  }, [dayEditModal, selectedTplId])

  const load = async () => {
    setLoading(true)
    try {
      const off = await api.get('/admin/offices')
      const o = (off?.data?.data || []).find(x => String(x.id) === String(id))
      if (!o) { message.error('–û—Ñ–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'); navigate('/admin'); return }
      setOffice(o)
      setEditOffice({ city: o.city || '', address: o.address || '', bitrixOfficeId: o.bitrixOfficeId ? String(o.bitrixOfficeId) : '' })
      // load templates for quick apply
      const t = await api.get('/admin/templates')
      setTemplates(t?.data?.data || [])
    } finally { setLoading(false) }
  }

  useEffect(() => {
    load()
  }, [id])

  // removed inline template methods

  // day editor removed

  const loadPreview = async () => {
    const days = [...Array(7)].map((_,i) => toLocalISO(dayjs(previewStart).add(i,'day')))
    const lists = await Promise.all(days.map(d => api.get('/admin/slots/all', { params: { office_id: id, date: d } }).then(r=>r?.data?.data||[])))
    setPreviewDays(lists)
  }

  // exceptions list removed

  useEffect(() => { if (office) { loadPreview() } }, [office, previewStart])

  // Websocket live updates for admin preview
  useEffect(() => {
    let ws
    try {
      const base = '/api'
      let url
      if (base.startsWith('http')) {
        const u = new URL(base.replace(/\/$/, ''))
        u.protocol = u.protocol === 'https:' ? 'wss:' : 'ws:'
        u.pathname = (u.pathname.replace(/\/$/, '')) + '/ws'
        url = u.toString()
      } else {
        const loc = window.location
        url = `${loc.protocol === 'https:' ? 'wss:' : 'ws:'}//${loc.host}${base.replace(/\/$/, '')}/ws`
      }
      ws = new WebSocket(url)
      ws.onmessage = (ev) => {
        try {
          const msg = JSON.parse(ev.data)
          if (msg.type === 'slots.updated') {
            if (id && String(msg.office_id) === String(id)) {
              loadPreview()
            }
          } else if (msg.type === 'appointment.updated') {
            const apptOfficeId = msg?.appointment?.office_id || msg?.office_id
            if (id && apptOfficeId && String(apptOfficeId) === String(id)) {
              loadPreview()
            }
          } else if (msg.type === 'time.tick') {
            if (id) loadPreview()
          }
        } catch {}
      }
    } catch {}
    return () => { try { ws && ws.close() } catch {} }
  }, [id, previewStart])

  if (loading) return <Skeleton active />

  const prevWeek = () => setPreviewStart(dayjs(previewStart).subtract(7,'day'))
  const nextWeek = () => setPreviewStart(dayjs(previewStart).add(7,'day'))
  const goToday = () => setPreviewStart(dayjs().startOf('week'))
  const onPickWeek = (v) => setPreviewStart(v ? dayjs(v).startOf('week') : dayjs().startOf('week'))
  const weekLabel = `${dayjs(previewStart).locale('ru').format('D MMMM YYYY')} ‚Äî ${dayjs(previewStart).add(6,'day').locale('ru').format('D MMMM YYYY')}`

  const applyExistingTemplate = async () => {
    if (!selectedTplId) return message.error('–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω')
    if (!applyRange?.[0] || !applyRange?.[1]) return message.error('–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç')
    const start = applyRange[0].format('YYYY-MM-DD')
    const end = applyRange[1].format('YYYY-MM-DD')
    await api.post(`/admin/templates/${selectedTplId}/apply`, { office_id: id, start_date: start, end_date: end })
    message.success('–®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω')
    await loadPreview()
  }

  return (
    <div>
      <PageHeader
        title={`${office?.city || '–û—Ñ–∏—Å'} ‚Ä¢ ${office?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`}
        icon={<EnvironmentOutlined />}
        onRefresh={load}
        loading={loading}
      />
      <Tabs
        defaultActiveKey="calendar"
        items={[
          {
            key:'office', label:'–û—Ñ–∏—Å', children: (
              <Space direction="vertical" size={12} style={{ width:'100%' }}>
                <Card>
                  <div style={{ display:'grid', gridTemplateColumns:'10fr 2fr', gap:16, alignItems:'start' }}>
                    <div>
                    <div style={{ display:'flex', flexDirection:'column', gap:12 }}>
                      <div>
                        <div style={{ fontWeight:500, marginBottom:6 }}>–ì–æ—Ä–æ–¥</div>
                        <Input value={editOffice.city} onChange={(e)=>setEditOffice({ ...editOffice, city: e.target.value })} />
                      </div>
                      <div>
                        <div style={{ fontWeight:500, marginBottom:6 }}>–ê–¥—Ä–µ—Å</div>
                        <Input value={editOffice.address} onChange={(e)=>setEditOffice({ ...editOffice, address: e.target.value })} />
                      </div>
                      <div>
                        <div style={{ fontWeight:500, marginBottom:6 }}>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</div>
                        <Input.TextArea 
                          value={editOffice.addressNote||''}
                          onChange={(e)=>setEditOffice({ ...editOffice, addressNote: e.target.value })}
                          autoSize={{ minRows: 4, maxRows: 8 }}
                          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≤—Ö–æ–¥ —Å–æ –¥–≤–æ—Ä–∞; 3 —ç—Ç–∞–∂, –æ—Ñ–∏—Å 305; –ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–∏ –≤—Ö–æ–¥–µ; –ø–∞—Ä–∫–æ–≤–∫–∞ –≤–æ –¥–≤–æ—Ä–µ"
                        />
                        <div style={{ marginTop:4, fontSize:12, color:'#8c8c8c' }}>
                          –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: –∫–∞–∫ –ø—Ä–æ–π—Ç–∏, –∫ –∫–æ–º—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω–µ, –≥–¥–µ –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.
                        </div>
                      </div>
                      <div>
                        <div style={{ fontWeight:500, marginBottom:6 }}>Bitrix Office ID</div>
                        <Input 
                          value={editOffice.bitrixOfficeId}
                          placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345"
                          onChange={(e)=>{
                            const v = e.target.value.replace(/[^0-9]/g, '')
                            setEditOffice({ ...editOffice, bitrixOfficeId: v })
                          }} 
                        />
                      </div>
                    </div>
                    <div style={{ marginTop:12, display:'flex', justifyContent:'flex-start', gap:12, flexWrap:'wrap' }}>
                      <Button type="primary" size="large" onClick={async()=>{
                        await api.put(`/admin/offices/${id}`, { 
                          city: editOffice.city, 
                          address: editOffice.address,
                          addressNote: editOffice.addressNote || undefined,
                          bitrixOfficeId: editOffice.bitrixOfficeId ? Number(editOffice.bitrixOfficeId) : undefined
                        })
                        message.success('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
                        setOffice({ ...office, ...editOffice, bitrixOfficeId: editOffice.bitrixOfficeId ? Number(editOffice.bitrixOfficeId) : null })
                      }}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
                    </div>
                    </div>
                    <div style={{ display:'flex', justifyContent:'flex-end', alignItems:'flex-start' }}>
                      <Dropdown
                        placement="bottomRight"
                        trigger={["click"]}
                        menu={{
                          items: [
                            {
                              key: 'delete',
                              label: (
                                <span style={{ color: '#ff4d4f', display:'flex', alignItems:'center', gap:8 }}>
                                  <DeleteOutlined />–£–¥–∞–ª–∏—Ç—å –æ—Ñ–∏—Å
                                </span>
                              ),
                            },
                          ],
                          onClick: ({ key }) => {
                            if (key === 'delete') { setDeleteConfirm(''); setDeleteOpen(true) }
                          },
                        }}
                      >
                        <Button size="middle" type="default" icon={<MoreOutlined />}>–î–µ–π—Å—Ç–≤–∏—è</Button>
                      </Dropdown>
                    </div>
                  </div>
                </Card>
              </Space>
            )
          },
          // Hours tab removed; templates managed in /admin/templates
          // Exceptions tab removed
          {
            key:'calendar', label:'–ö–∞–ª–µ–Ω–¥–∞—Ä—å', children: (
              <Space direction="vertical" size={12} style={{ width:'100%' }}>
                <Card>
                  <Space direction="vertical" size={8} style={{ width:'100%' }}>
                    <Space wrap>
                      <Button onClick={prevWeek}>‚Üê –ù–µ–¥–µ–ª—è</Button>
                      <Button onClick={goToday}>–°–µ–≥–æ–¥–Ω—è</Button>
                      <Button onClick={nextWeek}>–ù–µ–¥–µ–ª—è ‚Üí</Button>
                      <DatePicker picker="week" value={previewStart} onChange={onPickWeek} />
                      <span style={{ color:'#666' }}>{weekLabel}</span>
                    </Space>
                    <Space wrap>
                                        <Select
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω"
                    value={selectedTplId}
                    onChange={setSelectedTplId}
                    style={{ minWidth: 280 }}
                    options={(templates||[]).map(t => ({ value: t.id, label: t.name }))}
                  />
                  <DatePicker.RangePicker value={applyRange} onChange={setApplyRange} />
                  <Button type="primary" onClick={applyExistingTemplate}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É</Button>

                    </Space>
                  </Space>
                </Card>

                {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ */}
                {selectedSlots.length > 0 && (
                  <Card 
                    size="small" 
                    style={{ 
                      background: '#e6f4ff', 
                      border: '1px solid #91caff' 
                    }}
                  >
                    <Space>
                      <span style={{ fontWeight: 500 }}>
                        –í—ã–±—Ä–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: {selectedSlots.length}
                      </span>
                      <Button 
                        size="small"
                        danger
                        icon={<DeleteOutlined />}
                        onClick={() => {
                          Modal.confirm({
                            title: '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã?',
                            icon: <ExclamationCircleOutlined />,
                            content: (
                              <div>
                                <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <strong>—É–¥–∞–ª–∏—Ç—å {selectedSlots.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</strong>?</p>
                                <p style={{ color: '#ff4d4f', fontSize: '12px' }}>
                                  ‚ö†Ô∏è –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —ç—Ç–∏—Ö —Å–ª–æ—Ç–∞—Ö –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã.
                                </p>
                              </div>
                            ),
                            okText: '–î–∞, —É–¥–∞–ª–∏—Ç—å',
                            okButtonProps: { danger: true },
                            cancelText: '–û—Ç–º–µ–Ω–∞',
                            onOk: async () => {
                              try {
                                const ids = Array.from(new Set(
                                  (selectedSlots || [])
                                    .map(s => s.slotId)
                                    .filter(Boolean)
                                ))
                                if (ids.length === 0) {
                                  message.info('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
                                  return
                                }
                                const results = await Promise.allSettled(
                                  ids.map(id => api.delete(`/admin/slots/${id}`).catch(() => null))
                                )
                                const ok = results.filter(r => r.status === 'fulfilled').length
                                const failed = ids.length - ok
                                setSelectedSlots([])
                                await loadPreview()
                                if (failed === 0) {
                                  message.success(`–£–¥–∞–ª–µ–Ω–æ ${ok} —Å–ª–æ—Ç–∞(–æ–≤)`)                 
                                } else if (ok > 0) {
                                  message.warning(`–£–¥–∞–ª–µ–Ω–æ ${ok}, –æ—à–∏–±–æ–∫: ${failed}`)
                                } else {
                                  message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç—ã')
                                }
                              } catch (error) {
                                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:', error)
                                message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç—ã')
                              }
                            }
                          })
                        }}
                      >
                        –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                      </Button>
                      <Button 
                        size="small"
                        onClick={() => setSelectedSlots([])}
                      >
                        –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                      </Button>
                    </Space>
                  </Card>
                )}

                <div style={{ display:'grid', gridTemplateColumns:'repeat(7, minmax(160px, 1fr))', borderLeft:'1px solid #eee', borderTop:'1px solid #eee' }}>
                  {[0,1,2,3,4,5,6].map((i) => {
                    const dd = dayjs(previewStart).add(i,'day').locale('ru')
                    const dow = dd.format('dddd').replace(/^./, c => c.toUpperCase())
                    const full = dd.format('D MMMM YYYY')
                    const dateISO = toLocalISO(dd)
                    const daySlots = previewDays[i] || []
                    const hasSlots = daySlots.length > 0
                    return (
                      <div key={`h-${i}`} style={{ position:'sticky', top:0, background:'#fafafa', padding:8, borderRight:'1px solid #eee', borderBottom:'1px solid #eee' }}>
                        <div style={{ fontWeight: 600, marginBottom: 4 }}>{dow}</div>
                        <div style={{ color:'#666', marginBottom: 6, fontSize: 12 }}>{full}</div>
                        <div style={{ display: 'flex', gap: 6, flexWrap: 'wrap' }}>
                          {hasSlots ? (
                            <>
                              <button 
                                style={{ 
                                  border: 'none', 
                                  background: '#ff4d4f', 
                                  color: 'white', 
                                  padding: '4px 8px', 
                                  borderRadius: 4, 
                                  fontSize: 11, 
                                  cursor: 'pointer',
                                  fontWeight: 500,
                                  transition: 'all 0.2s'
                                }}
                                onMouseEnter={(e) => e.target.style.background = '#ff7875'}
                                onMouseLeave={(e) => e.target.style.background = '#ff4d4f'}
                                onClick={async () => {
                                  console.log('üî¥ CLOSE DAY BUTTON CLICKED:', { id, dateISO })
                                  try {
                                    console.log('üì° Sending POST to /slots/close-day')
                                    await api.post('/admin/slots/close-day', {
                                      office_id: id,
                                      date: dateISO
                                    })
                                    console.log('‚úÖ Request successful')
                                    message.success('–î–µ–Ω—å –∑–∞–∫—Ä—ã—Ç')
                                    await loadPreview()
                                  } catch (err) {
                                    console.error('‚ùå Request failed:', err)
                                    message.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–Ω—è')
                                  }
                                }}
                              >
                                –ó–∞–∫—Ä—ã—Ç—å
                              </button>
                              <button 
                                style={{ 
                                  border: '1px solid #d9d9d9', 
                                  background: 'white', 
                                  color: '#595959', 
                                  padding: '4px 8px', 
                                  borderRadius: 4, 
                                  fontSize: 11, 
                                  cursor: 'pointer',
                                  fontWeight: 500,
                                  transition: 'all 0.2s'
                                }}
                                onMouseEnter={(e) => {
                                  e.target.style.borderColor = '#40a9ff'
                                  e.target.style.color = '#40a9ff'
                                }}
                                onMouseLeave={(e) => {
                                  e.target.style.borderColor = '#d9d9d9'
                                  e.target.style.color = '#595959'
                                }}
                                onClick={() => setDayEditModal({ date: dateISO, dateLabel: full })}
                              >
                                –ò–∑–º–µ–Ω–∏—Ç—å
                              </button>
                              {/* –û—á–∏—Å—Ç–∏—Ç—å = –∑–∞–∫—Ä—ã—Ç—å: –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–∞–∫ –¥—É–±–ª–∏—Ä—É—é—â–∞—è */}
                            </>
                          ) : (
                            <button 
                              style={{ 
                                border: '1px solid #1890ff', 
                                background: '#1890ff', 
                                color: 'white', 
                                padding: '4px 8px', 
                                borderRadius: 4, 
                                fontSize: 11, 
                                cursor: 'pointer',
                                fontWeight: 500,
                                transition: 'all 0.2s'
                              }}
                              onMouseEnter={(e) => e.target.style.background = '#40a9ff'}
                              onMouseLeave={(e) => e.target.style.background = '#1890ff'}
                              onClick={() => setDayEditModal({ date: dateISO, dateLabel: full })}
                            >
                              –û—Ç–∫—Ä—ã—Ç—å
                            </button>
                          )}
                        </div>
                      </div>
                    )
                  })}
                  {(() => {
                    const toMin = (t) => { const [h,m] = t.split(':').map(Number); return h*60+m }
                    const toTime = (m) => `${String(Math.floor(m/60)).padStart(2,'0')}:${String(m%60).padStart(2,'0')}`
                    let minStart = Infinity, maxEnd = -Infinity
                    ;(previewDays||[]).forEach(day => (day||[]).forEach(s => { minStart = Math.min(minStart, toMin(s.start)); maxEnd = Math.max(maxEnd, toMin(s.end)) }))
                    if (!Number.isFinite(minStart) || !Number.isFinite(maxEnd) || minStart>=maxEnd) return null
                    const rows = []
                    for (let t=minStart; t<maxEnd; t+=30) rows.push(toTime(t))
                    return rows.map((t) => (
                      <React.Fragment key={`row-${t}`}>
                        {[0,1,2,3,4,5,6].map((i) => {
                          const slot = (previewDays[i]||[]).find(s => s.start === t)
                          const has = !!slot
                          const free = Number(slot?.free ?? 0)
                          const cap = Number(slot?.capacity ?? 0)
                          const isBreak = has && cap === 0
                          const dateISO = toLocalISO(dayjs(previewStart).add(i,'day'))
                          const selected = has && isSlotSelected(dateISO, slot?.start, slot?.end, slot?.id)
                          const bg = selected ? '#e6f4ff' : (has ? (isBreak ? '#fff2e8' : (free > 0 ? '#f6ffed' : '#fff1f0')) : '#fafafa')
                          const fg = has ? (isBreak ? '#d46b08' : (free > 0 ? '#389e0d' : '#cf1322')) : '#999'
                          const baseStyle = { borderRight:'1px solid #eee', borderBottom:'1px solid #eee', padding:6, background: bg, color: fg, cursor: has ? 'pointer' : 'default', boxShadow: selected ? 'inset 0 0 0 2px #1677ff' : 'none' }
                          return <div key={`${i}-${t}`} style={baseStyle} onClick={() => {
                            if (!has) return
                            const additive = (window.event && (window.event.metaKey || window.event.ctrlKey))
                            const dateISO2 = toLocalISO(dayjs(previewStart).add(i,'day'))
                            if (additive) {
                              toggleSelectSlot(dateISO2, slot.start, slot.end, slot.id, true)
                              return
                            }
                            // normal click: open editor and reset selection
                            setSelectedSlots([])
                            setEditSlot({ ...slot, date: dateISO2, office_id: id })
                            setEditCapacity(cap || 1)
                          }}>{has ? (isBreak ? `${slot.start} ‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤` : `${slot.start} ‚Ä¢ ${free}/${cap}`) : '‚Äî'}</div>
                        })}
                      </React.Fragment>
                    ))
                  })()}
                </div>
              </Space>
            )
          }
        ]}
      />
      {selectedSlots.length > 0 && (
        <div style={{ position:'sticky', bottom:16, zIndex:3, display:'flex', gap:12, alignItems:'center', background:'#fff', padding:'8px 12px', border:'1px solid #e6f4ff', boxShadow:'0 8px 24px rgba(0,0,0,0.08)', borderRadius:8 }}>
          <div style={{ fontWeight:600 }}>–í—ã–±—Ä–∞–Ω–æ: {selectedSlots.length}</div>
          <div style={{ color:'#555' }}>–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</div>
          <Input type="number" min={0} style={{ width:160 }} placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 (0 ‚Äî –ø–µ—Ä–µ—Ä—ã–≤)" value={editCapacity} onChange={(e)=>setEditCapacity(Math.max(0, Number(e.target.value)||0))} />
          <Button type="primary" onClick={async()=>{
            try {
              // Prefer precise id-based updates if available
              const hasIds = selectedSlots.every(s => s.slotId)
              if (hasIds) {
                await Promise.all(selectedSlots.map(s => api.get('/admin/slots/all', { params: { office_id: id, date: s.date, update_slot_id: s.slotId, new_capacity: editCapacity } })))
              } else {
                await Promise.all(selectedSlots.map(s => api.get('/admin/slots/all', { params: { office_id: id, date: s.date, update_slot_id: s.slotId, new_capacity: editCapacity } })))
              }
              message.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º')
              setSelectedSlots([])
              await loadPreview()
            } catch (e) { message.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ') }
          }}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å</Button>
          <Button onClick={()=>setSelectedSlots([])}>–°–±—Ä–æ—Å–∏—Ç—å</Button>
        </div>
      )}
      {editSlot && (
        <Modal
          open
          title={<div><div style={{ fontWeight: 600 }}>–ò–∑–º–µ–Ω–∏—Ç—å –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</div><div style={{ color:'#666', fontSize: 12 }}>{dayjs(editSlot.date).locale('ru').format('dddd, D MMMM YYYY')} ‚Ä¢ {editSlot.start}‚Äî{editSlot.end}</div></div>}
          onCancel={()=>setEditSlot(null)}
          footer={null}
          width={400}
        >
          <div style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>
            <Card size="small">
              <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
                <div style={{ fontSize: 14, fontWeight: 500 }}>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</div>
                <Input 
                  type="number" 
                  min={0} 
                  value={editCapacity} 
                  onChange={(e)=>setEditCapacity(Math.max(0, Number(e.target.value)||0))} 
                  style={{ width: 100 }} 
                />
                {editCapacity === 0 && (
                  <div style={{ color: '#ff4d4f', fontSize: 12, fontWeight: 500 }}>
                    –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
                  </div>
                )}
              </div>
              <div style={{ marginTop: 8, fontSize: 12, color: '#8c8c8c' }}>
                üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–∞—É–∑—ã
              </div>
              <div style={{ marginTop: 16, display: 'flex', justifyContent: 'flex-end', gap: 8 }}>
                <Button onClick={()=>setEditSlot(null)}>–û—Ç–º–µ–Ω–∞</Button>
                <Button type="primary" onClick={async()=>{
                  console.log('üî¥ SAVE CAPACITY BUTTON CLICKED:', { editSlot, editCapacity, id })
                  try {
                    console.log('üì° Sending capacity update:', `/slots/all?office_id=${id}&date=${editSlot.date}&update_slot_id=${editSlot.id}&new_capacity=${editCapacity}`)
                    await api.get(`/admin/slots/all?office_id=${id}&date=${editSlot.date}&update_slot_id=${editSlot.id}&new_capacity=${editCapacity}`)
                    console.log('‚úÖ Capacity update successful')
                    message.success('–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
                    setEditSlot(null)
                    await loadPreview()
                  } catch (err) {
                    console.error('‚ùå Capacity update failed:', err)
                    message.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏')
                  }
                }}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
              </div>
            </Card>
          </div>
        </Modal>
      )}
      
      {/* Day Edit Modal */}
      {dayEditModal && (
        <Modal
          open
          title={<div><div style={{ fontWeight: 600 }}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å</div><div style={{ color:'#666', fontSize: 12 }}>{dayEditModal.dateLabel}</div></div>}
          onCancel={()=>setDayEditModal(null)}
          footer={null}
          width={600}
        >
          <div style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>
            {/* –û—Ç–∫—Ä—ã—Ç—å –ø–æ —à–∞–±–ª–æ–Ω—É */}
            <Card size="small">
              <div style={{ marginBottom: 12, fontWeight: 500 }}>–û—Ç–∫—Ä—ã—Ç—å –ø–æ —à–∞–±–ª–æ–Ω—É</div>
              <div style={{ display: 'flex', gap: 12, alignItems: 'flex-end' }}>
                <div style={{ flex: 1 }}>
                  <Select
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω"
                    value={modalTplId}
                    onChange={setModalTplId}
                    style={{ width: '100%' }}
                    options={(templates||[]).map(t => ({ value: t.id, label: t.name }))}
                  />
                </div>
                <Button type="primary" onClick={async () => {
                  if (!modalTplId) return message.warning('–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω')
                  try {
                                            await api.post('/admin/slots/open-day', { office_id: id, date: dayEditModal.date, template_id: modalTplId })
                    message.success('–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç –ø–æ —à–∞–±–ª–æ–Ω—É')
                    setDayEditModal(null)
                    await loadPreview()
                  } catch (err) {
                    message.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É')
                  }
                }}>–û—Ç–∫—Ä—ã—Ç—å</Button>
              </div>
            </Card>

            {/* –¢–æ—á–µ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
            <Card size="small">
              <div style={{ marginBottom: 12, fontWeight: 500 }}>–¢–æ—á–µ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</div>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16 }}>
                <div>
                  <div style={{ marginBottom: 8, fontSize: 12, color: '#666' }}>–ó–∞–∫—Ä—ã—Ç—å —Å –≤—Ä–µ–º–µ–Ω–∏</div>
                  <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                    <TimePicker 
                      format="HH:mm" 
                      minuteStep={30} 
                      placeholder="16:00" 
                      style={{ flex: 1 }}
                      onChange={(v)=>setCloseAfter(v? v.format('HH:mm'): '')} 
                    />
                    <Button size="small" onClick={async () => {
                      if (!closeAfter) return message.warning('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è')
                      try {
                        await api.post('/admin/slots/close-early', { office_id: id, date: dayEditModal.date, close_after: closeAfter, template_id: modalTplId })
                        message.success('–ó–∞–∫—Ä—ã—Ç–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')
                        setDayEditModal(null)
                        setCloseAfter('')
                        await loadPreview()
                      } catch (err) {
                        message.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å –≤—Ä–µ–º–µ–Ω–∏')
                      }
                    }}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å</Button>
                  </div>
                </div>
                <div>
                  <div style={{ marginBottom: 8, fontSize: 12, color: '#666' }}>–û—Ç–∫—Ä—ã—Ç—å —Å –≤—Ä–µ–º–µ–Ω–∏</div>
                  <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                    <TimePicker 
                      format="HH:mm" 
                      minuteStep={30} 
                      placeholder="10:00" 
                      style={{ flex: 1 }}
                      onChange={(v)=>setOpenFrom(v? v.format('HH:mm'): '')} 
                    />
                    <Button size="small" onClick={async () => {
                      if (!openFrom) return message.warning('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è')
                      try {
                        await api.post('/admin/slots/open-late', { office_id: id, date: dayEditModal.date, open_from: openFrom, template_id: modalTplId })
                        message.success('–û—Ç–∫—Ä—ã—Ç–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')
                        setDayEditModal(null)
                        setOpenFrom('')
                        await loadPreview()
                      } catch (err) {
                        message.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å –≤—Ä–µ–º–µ–Ω–∏')
                      }
                    }}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å</Button>
                  </div>
                </div>
                <div style={{ gridColumn: '1 / span 2' }}>
                  <div style={{ marginBottom: 8, fontSize: 12, color: '#666' }}>–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫</div>
                  <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                    <TimePicker 
                      format="HH:mm" 
                      minuteStep={30} 
                      placeholder="—Å" 
                      onChange={(v)=>setOpenFrom(v? v.format('HH:mm'): '')}
                    />
                    <span>‚Äî</span>
                    <TimePicker 
                      format="HH:mm" 
                      minuteStep={30} 
                      placeholder="–¥–æ" 
                      onChange={(v)=>setCloseAfter(v? v.format('HH:mm'): '')}
                    />
                    <Button size="small" danger onClick={async () => {
                      if (!openFrom || !closeAfter) return message.warning('–£–∫–∞–∂–∏—Ç–µ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏');
                      try {
                        await api.post('/admin/slots/clear-interval', { office_id: id, date: dayEditModal.date, from: openFrom, to: closeAfter })
                        message.success('–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –æ—á–∏—â–µ–Ω')
                        setDayEditModal(null)
                        setOpenFrom('');
                        setCloseAfter('');
                        await loadPreview()
                      } catch (err) {
                        message.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞')
                      }
                    }}>–û—á–∏—Å—Ç–∏—Ç—å</Button>
                  </div>
                </div>
              </div>
            </Card>

            {/* –û–∫–Ω–æ —Ä–∞–±–æ—Ç—ã */}
            <Card size="small">
              <div style={{ marginBottom: 12, fontWeight: 500 }}>–û–∫–Ω–æ —Ä–∞–±–æ—Ç—ã</div>
              <div style={{ display: 'flex', gap: 12, alignItems: 'flex-end' }}>
                <div style={{ flex: 1 }}>
                  <div style={{ marginBottom: 4, fontSize: 12, color: '#666' }}>–û—Ç–∫—Ä—ã—Ç—å —Å</div>
                  <TimePicker 
                    format="HH:mm" 
                    minuteStep={30} 
                    placeholder="10:00" 
                    style={{ width: '100%' }}
                    onChange={(v)=>setOpenFrom(v? v.format('HH:mm'): '')} 
                  />
                </div>
                <div style={{ flex: 1 }}>
                  <div style={{ marginBottom: 4, fontSize: 12, color: '#666' }}>–ó–∞–∫—Ä—ã—Ç—å —Å</div>
                  <TimePicker 
                    format="HH:mm" 
                    minuteStep={30} 
                    placeholder="22:00" 
                    style={{ width: '100%' }}
                    onChange={(v)=>setCloseAfter(v? v.format('HH:mm'): '')} 
                  />
                </div>
                <Tooltip title="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç —Å–ª–æ—Ç—ã –ø–æ —à–∞–±–ª–æ–Ω—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–∫–Ω–æ. –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –±—É–¥—É—Ç –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω—ã.">
                  <Button type="primary" onClick={async () => {
                    try {
                      await api.post('/admin/slots/set-window', { office_id: id, date: dayEditModal.date, template_id: modalTplId, open_from: openFrom||undefined, close_after: closeAfter||undefined })
                      message.success('–û–∫–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ')
                      setDayEditModal(null)
                      await loadPreview()
                    } catch (err) {
                      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–∫–Ω–∞')
                    }
                  }}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–∫–Ω–æ</Button>
                </Tooltip>
              </div>
              <div style={{ marginTop: 12, padding: 8, background: '#f6f8fa', borderRadius: 4, fontSize: 12, color: '#666' }}>
                üí° <strong>–û–∫–Ω–æ —Ä–∞–±–æ—Ç—ã</strong> ‚Äî —Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –¥–ª—è —Ç–æ—á–µ—á–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫.
              </div>
            </Card>
          </div>
        </Modal>
      )}
      {/* Delete office modal */}
      <Modal
        open={deleteOpen}
        onCancel={()=>setDeleteOpen(false)}
        onOk={async ()=>{
          try {
            await api.delete(`/admin/offices/${id}`)
            message.success('–û—Ñ–∏—Å —É–¥–∞–ª—ë–Ω')
            setDeleteOpen(false)
            navigate('/admin')
          } catch (e) {
            message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ñ–∏—Å')
          }
        }}
        okButtonProps={{ danger: true, disabled: (deleteConfirm.trim() !== (`${office?.city||''} ‚Ä¢ ${office?.address||''}`)) }}
        title="–£–¥–∞–ª–∏—Ç—å –æ—Ñ–∏—Å"
      >
        <div style={{ display:'flex', flexDirection:'column', gap:12 }}>
          <Typography.Text>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞:</Typography.Text>
          <Typography.Text code>{office?.city} ‚Ä¢ {office?.address}</Typography.Text>
          <Input placeholder="–¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞" value={deleteConfirm} onChange={(e)=>setDeleteConfirm(e.target.value)} />
        </div>
      </Modal>
    </div>
  )
}


