const { Router } = require('express');
const { body, param, query, validationResult } = require('express-validator');

const { models, Op, Sequelize } = require('../lib/db');
const axios = require('axios');
const { invalidateSlotsCache } = require('../services/slotsService');
const { broadcastSlotsUpdated, broadcastAppointmentUpdated } = require('../lib/ws');

const router = Router();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ –ª–∏–¥–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ
async function ensureLeadStage(leadId, targetStageId, currentStageId = null) {
	try {
		// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –µ—ë –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å–∞
		if (!currentStageId) {
			const getLeadUrl = `${process.env.BITRIX_REST_URL}/crm.lead.get`;
			const getLeadResponse = await axios.post(getLeadUrl, { id: Number(leadId) });
			currentStageId = getLeadResponse.data.result.STATUS_ID;
		}

		console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞–¥–∏—é –ª–∏–¥–∞ ${leadId}: —Ç–µ–∫—É—â–∞—è = ${currentStageId}, —Ü–µ–ª–µ–≤–∞—è = ${targetStageId}`);

		// –ï—Å–ª–∏ –ª–∏–¥ —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
		if (String(currentStageId) === String(targetStageId)) {
			console.log(`‚úÖ –õ–∏–¥ ${leadId} —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏ ${targetStageId}`);
			return;
		}

		// –ï—Å–ª–∏ –ª–∏–¥ –≤ —Å—Ç–∞–¥–∏–∏ "2" –∏ –º—ã —Ö–æ—Ç–∏–º –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ "IN_PROCESS"
		if (String(currentStageId) === '2' && String(targetStageId) === '2') {
			console.log(`üîÑ –ü–µ—Ä–µ–≤–æ–∂—É –ª–∏–¥ ${leadId} –∏–∑ —Å—Ç–∞–¥–∏–∏ "2" –≤ "IN_PROCESS" –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—Å—Ç—Ä–µ—á–∏`);
			
			const updateStageUrl = `${String(process.env.BITRIX_REST_URL).replace(/\/+$/, '')}/crm.lead.update`;
			await axios.post(updateStageUrl, {
				id: Number(leadId),
				fields: { STATUS_ID: 'IN_PROCESS' }
			});
			
			console.log(`‚úÖ –õ–∏–¥ ${leadId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞–¥–∏—é "IN_PROCESS"`);
		}

		// –ï—Å–ª–∏ –ª–∏–¥ –≤ —Å—Ç–∞–¥–∏–∏ "2" –∏ –º—ã —Ö–æ—Ç–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ "IN_PROCESS"
		if (String(currentStageId) === '2' && String(targetStageId) === '37') {
			console.log(`üîÑ –ü–µ—Ä–µ–≤–æ–∂—É –ª–∏–¥ ${leadId} –∏–∑ —Å—Ç–∞–¥–∏–∏ "2" –≤ "IN_PROCESS" –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—Å—Ç—Ä–µ—á–∏`);
			
			const updateStageUrl = `${String(process.env.BITRIX_REST_URL).replace(/\/+$/, '')}/crm.lead.update`;
			await axios.post(updateStageUrl, {
				id: Number(leadId),
				fields: { STATUS_ID: 'IN_PROCESS' }
			});
			
			console.log(`‚úÖ –õ–∏–¥ ${leadId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞–¥–∏—é "IN_PROCESS"`);
		}

	} catch (e) {
		console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞–¥–∏–∏ –ª–∏–¥–∞ ${leadId}:`, e?.response?.data || e?.message || e);
		throw e;
	}
}

router.get('/', [query('lead_id').optional().isInt()], async (req, res, next) => {
	try {
		const where = {};
		if (req.query.lead_id) where.bitrix_lead_id = Number(req.query.lead_id);
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (PostgreSQL)
		where.date = { [Op.gte]: Sequelize.literal("DATE_TRUNC('week', CURRENT_DATE)") };
		where.status = ['pending','confirmed'];
		const items = await models.Appointment.findAll({
			where,
			include: [{ model: models.Office }],
			order: [['createdAt', 'DESC']],
		});
		res.json({ data: items });
	} catch (e) { next(e); }
});

router.post('/', [
	body('office_id').isString().notEmpty(),
	body('date').isISO8601(),
	body('time_slot').isString().notEmpty(),
	body('lead_id').optional().isInt(),
	body('deal_id').optional().isInt(),
	body('contact_id').optional().isInt(),
], async (req, res, next) => {
	try {
		console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ - –≤—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
		console.log('  - req.query:', req.query);
		console.log('  - req.query.user_id:', req.query.user_id);
		console.log('  - req.bitrix:', req.bitrix);
		console.log('  - req.bitrix.userId:', req.bitrix?.userId);
		console.log('  - req.body:', req.body);
		
		const errors = validationResult(req);
		if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });
		const { office_id, date, time_slot, lead_id, deal_id, contact_id } = req.body;
		const office = await models.Office.findByPk(office_id);
		if (!office) return res.status(404).json({ error: 'Office not found' });

		const newDate = String(date).slice(0, 10);

		// –û–¥–∏–Ω –ª–∏–¥ ‚Äî –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å: –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ (pending/confirmed) –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
		if (lead_id) {
			const activeAppointments = await models.Appointment.findAll({
				where: {
					bitrix_lead_id: lead_id,
					status: ['pending','confirmed'],
					date: { [Op.gte]: Sequelize.literal("DATE_TRUNC('week', CURRENT_DATE)") },
				},
				include: [{ model: models.Office }],
				order: [['createdAt', 'DESC']],
			});
			for (const appt of activeAppointments) {
				const oldOfficeId = appt.office_id || (appt.Office && appt.Office.id);
				const oldDate = appt.date;
				appt.status = 'cancelled';
				await appt.save();
				await invalidateSlotsCache(oldOfficeId, oldDate);
				broadcastSlotsUpdated(oldOfficeId, oldDate);
				broadcastAppointmentUpdated(appt);
			}
		}

		const appointment = await models.Appointment.create({
			office_id,
			bitrix_lead_id: lead_id ?? null,
			bitrix_deal_id: deal_id ?? null,
			bitrix_contact_id: contact_id ?? null,
			date: newDate,
			timeSlot: time_slot,
			status: 'pending',
			createdBy: (req.bitrix && req.bitrix.userId) || 0,
		});
		
		// If appointment created with lead_id ‚Äî push updates to Bitrix lead (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–¥–µ)
		if (process.env.NODE_ENV === 'production' && appointment.bitrix_lead_id) {
			try {
				console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Bitrix –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:');
				console.log('  - bitrix_lead_id:', appointment.bitrix_lead_id);
				console.log('  - req.bitrix:', req.bitrix);
				console.log('  - req.bitrix.userId:', req.bitrix?.userId);
				
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞–¥–∏—é –ª–∏–¥–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
				await ensureLeadStage(appointment.bitrix_lead_id, '2');

				// Resolve office Bitrix ID
				let officeBitrixId = null;
				if (office.bitrixOfficeId) {
					officeBitrixId = office.bitrixOfficeId;
				}

				const [startTime] = String(appointment.timeSlot || '').split('-');
				const dateParts = String(appointment.date || '').split('-'); // YYYY-MM-DD
				const dateRu = (dateParts.length === 3) ? `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}` : '';

				const url = `${String(process.env.BITRIX_REST_URL).replace(/\/+$/, '')}/crm.lead.update`;
				const requestData = {
					id: Number(appointment.bitrix_lead_id),
					fields: {
						STATUS_ID: 2, // –°—Ç–∞—Ç—É—Å "–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞"
						UF_CRM_1675255265: officeBitrixId ? Number(officeBitrixId) : null,
						UF_CRM_1725483092: Number(req.bitrix?.userId || 0) || null,
						UF_CRM_1655460588: dateRu || null,
						UF_CRM_1657019494: startTime || null,
					},
				};
				
				console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Bitrix –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:');
				console.log('  - URL:', url);
				console.log('  - user_id –∏–∑ req.bitrix.userId:', req.bitrix?.userId);
				console.log('  - user_id –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ UF_CRM_1725483092:', Number(req.bitrix?.userId || 0) || null);
				console.log('  - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestData, null, 2));
				
				const response = await axios.post(url, requestData);
				console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Bitrix –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', response.status, response.data);
			} catch (e) {
				console.error('Bitrix lead update failed on appointment creation:', e?.response?.data || e?.message || e);
			}
		} else if (appointment.bitrix_lead_id) {
			console.log('üö´ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Bitrix –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏');
		}
		
		await invalidateSlotsCache(office_id, newDate);
		broadcastSlotsUpdated(office_id, newDate);
		broadcastAppointmentUpdated(appointment);
		res.status(201).json({ data: await models.Appointment.findByPk(appointment.id, { include: [{ model: models.Office }] }) });

	} catch (e) { next(e); }
});

router.put('/:id', [
	param('id').isString().notEmpty(),
	body('status').optional().isIn(['pending', 'confirmed', 'cancelled', 'rescheduled']),
	body('date').optional().isISO8601(),
	body('time_slot').optional().isString().notEmpty(),
	body('office_id').optional().isString().notEmpty(),
], async (req, res, next) => {
	try {
		const errors = validationResult(req);
		if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });
		const id = req.params.id;
		const appointment = await models.Appointment.findByPk(id, { include: [{ model: models.Office }] });
		if (!appointment) return res.status(404).json({ error: 'Not found' });

		const { status, date, time_slot, office_id } = req.body;
		const oldDate = appointment.date;
		const oldOfficeId = appointment.office_id || (appointment.Office && appointment.Office.id);

		if (status) appointment.status = status;
		if (date) appointment.date = String(date).slice(0, 10);
		if (time_slot) appointment.timeSlot = time_slot;
		if (office_id) appointment.office_id = office_id;
		await appointment.save();

		// If appointment confirmed ‚Äî push updates to Bitrix lead
		try {
			console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Bitrix:');
			console.log('  - status:', status);
			console.log('  - bitrix_lead_id:', appointment.bitrix_lead_id);
			console.log('  - req.bitrix:', req.bitrix);
			console.log('  - req.bitrix.userId:', req.bitrix?.userId);
			
			if (status === 'confirmed' && appointment.bitrix_lead_id && process.env.NODE_ENV === 'production') {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞–¥–∏—é –ª–∏–¥–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
				await ensureLeadStage(appointment.bitrix_lead_id, '37');

				// Resolve office Bitrix ID
				let officeBitrixId = null;
				if (appointment.Office && appointment.Office.bitrixOfficeId) {
					officeBitrixId = appointment.Office.bitrixOfficeId;
				} else if (appointment.office_id) {
					const off = await models.Office.findByPk(appointment.office_id);
					officeBitrixId = off ? (off.bitrixOfficeId || null) : null;
				}

				const [startTime] = String(appointment.timeSlot || '').split('-');
				const dateParts = String(appointment.date || '').split('-'); // YYYY-MM-DD
				const dateRu = (dateParts.length === 3) ? `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}` : '';

				const url = `${String(process.env.BITRIX_REST_URL).replace(/\/+$/, '')}/crm.lead.update`;
				const requestData = {
					id: Number(appointment.bitrix_lead_id),
					fields: {
						STATUS_ID: 37, // –°—Ç–∞—Ç—É—Å "–í—Å—Ç—Ä–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
						UF_CRM_1675255265: officeBitrixId ? Number(officeBitrixId) : null,
						UF_CRM_1725483092: Number(req.bitrix?.userId || 0) || null,
						UF_CRM_1655460588: dateRu || null,
						UF_CRM_1657019494: startTime || null,
					},
				};
				
				console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Bitrix –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:');
				console.log('  - URL:', url);
				console.log('  - user_id –∏–∑ req.bitrix.userId:', req.bitrix?.userId);
				console.log('  - user_id –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ UF_CRM_1725483092:', Number(req.bitrix?.userId || 0) || null);
				console.log('  - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestData, null, 2));
				
				const response = await axios.post(url, requestData);
				console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Bitrix –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', response.status, response.data);
			} else if (status === 'confirmed' && appointment.bitrix_lead_id) {
				console.log('üö´ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Bitrix –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏');
			} else if (status === 'cancelled' && appointment.bitrix_lead_id && process.env.NODE_ENV === 'production') {
				// –û—Ç–º–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∏: –ø–µ—Ä–µ–≤–æ–¥–∏–º –ª–∏–¥ –≤ IN_PROCESS –∏ –æ—á–∏—â–∞–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—è—Ö
				try {
					const url = `${String(process.env.BITRIX_REST_URL).replace(/\/+$/, '')}/crm.lead.update`;
					const requestData = {
						id: Number(appointment.bitrix_lead_id),
						fields: {
							STATUS_ID: 'IN_PROCESS',
							UF_CRM_1655460588: null, // –¥–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ -> null
							UF_CRM_1657019494: null  // –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ -> null
						}
					};
					console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Bitrix –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å—Ç—Ä–µ—á–∏:', JSON.stringify(requestData));
					const r = await axios.post(url, requestData);
					console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Bitrix –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å—Ç—Ä–µ—á–∏:', r.status, r.data);
				} catch (e) {
					console.error('Bitrix lead update failed on cancellation:', e?.response?.data || e?.message || e);
				}
			} else if (status === 'cancelled' && appointment.bitrix_lead_id) {
				console.log('üö´ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Bitrix –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å—Ç—Ä–µ—á–∏');
			}
		} catch (e) {
			console.error('Bitrix lead update failed:', e?.response?.data || e?.message || e);
		}

		await invalidateSlotsCache(oldOfficeId, oldDate);
		await invalidateSlotsCache(appointment.office_id, appointment.date);
		broadcastSlotsUpdated(oldOfficeId, oldDate);
		broadcastSlotsUpdated(appointment.office_id, appointment.date);
		broadcastAppointmentUpdated(appointment);

		res.json({ data: await models.Appointment.findByPk(id, { include: [{ model: models.Office }] }) });

	} catch (e) { next(e); }
});

module.exports = router;