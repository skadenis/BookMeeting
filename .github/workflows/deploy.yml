name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -e
            echo "üöÄ Starting deployment..."
            
            echo "üîç Environment check:"
            echo "   User: $(whoami)"
            echo "   Home: $HOME"
            echo "   PWD: $(pwd)"
            echo "   PATH: $PATH"
            
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
            if [ -z "$DEPLOY_PATH" ]; then 
              echo "‚ùå DEPLOY_PATH secret is required"
              exit 1
            fi
            
            echo "üìÅ Deploy path: $DEPLOY_PATH"
            echo "üîç Checking if directory exists..."
            ls -la "$(dirname "$DEPLOY_PATH")" || echo "‚ö†Ô∏è Cannot list parent directory"
            
            echo "üìÇ Creating deploy directory..."
            mkdir -p "$DEPLOY_PATH" || {
              echo "‚ùå Failed to create directory $DEPLOY_PATH"
              echo "üîç Current user: $(whoami)"
              echo "üîç Current directory: $(pwd)"
              echo "üîç Disk space: $(df -h .)"
              exit 1
            }
            
            echo "‚úÖ Directory created/verified"
            ls -la "$DEPLOY_PATH" || echo "‚ö†Ô∏è Cannot list deploy directory"
            
            if [ ! -d "$DEPLOY_PATH/.git" ]; then
              echo "üì• Cloning repository..."
              git clone --depth=1 https://github.com/${{ github.repository }} "$DEPLOY_PATH" || {
                echo "‚ùå Git clone failed"
                exit 1
              }
            else
              echo "üîÑ Updating existing repository..."
              cd "$DEPLOY_PATH" || {
                echo "‚ùå Cannot cd to $DEPLOY_PATH"
                exit 1
              }
              git fetch origin main --depth=1 || {
                echo "‚ùå Git fetch failed"
                exit 1
              }
              git reset --hard origin/main || {
                echo "‚ùå Git reset failed"
                exit 1
              }
            fi
            
            cd "$DEPLOY_PATH" || {
              echo "‚ùå Cannot cd to $DEPLOY_PATH after git operations"
              exit 1
            }
            
            echo "üìç Current directory: $(pwd)"
            echo "üìã Git status:"
            git log --oneline -3 || echo "‚ö†Ô∏è Git log failed"
            
            # Ensure env file exists (copy once from example if missing)
            if [ ! -f .env ]; then 
              echo "üìù Creating .env from example..."
              cp env.example .env || echo "‚ö†Ô∏è Warning: could not copy env.example"
            fi
            
            echo "üê≥ Checking Docker..."
            docker --version || echo "‚ùå Docker not available"
            docker compose version || echo "‚ùå Docker Compose not available"
            
            echo "üîß Building and starting services..."
            # Stop existing services first
            docker compose -f docker-compose.prod.yml down || echo "‚ö†Ô∏è No existing services to stop"
            
            # Build and start
            docker compose -f docker-compose.prod.yml up -d --build || {
              echo "‚ùå Docker Compose failed. Checking logs..."
              docker compose -f docker-compose.prod.yml logs || true
              exit 1
            }
            
            echo "üßπ Cleaning up Docker..."
            docker system prune -f || true
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üìä Service status:"
            docker compose -f docker-compose.prod.yml ps || true

