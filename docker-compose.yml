
services:
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: meetings
      POSTGRES_USER: meetings
      POSTGRES_PASSWORD: meetings
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U meetings -d meetings"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine

    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: 4000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: meetings
      DB_PASSWORD: meetings
      DB_NAME: meetings
      REDIS_HOST: redis
      REDIS_PORT: 6379
      BITRIX_DEV_MODE: "true"
      CORS_ORIGIN: "*"
      DB_CONNECT_RETRIES: 30
      DB_CONNECT_DELAY_MS: 2000
    volumes:
      - ./backend/src:/app/src
    command: ["npm", "run", "dev"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started


  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - frontend_build:/usr/share/nginx/html
    command: ["sh", "-c", "cp -r /out/* /usr/share/nginx/html 2>/dev/null || true; tail -f /dev/null"]

    depends_on:
      - backend

  nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_build:/usr/share/nginx/html:ro
    ports:
      - "8080:80"
    depends_on:
      - frontend
      - backend

volumes:
  pgdata:
  redisdata:
  frontend_build: